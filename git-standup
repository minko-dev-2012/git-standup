#!/usr/bin/env bash


## Get the options and store them in variables
while getopts "d::a::w::" opt; do
    declare "option_$opt=${OPTARG:-0}"
done

## If some options were given but none of them were the ones that we allow 
if [[ ! $option_a ]] && [[ ! $option_d ]] && [[ ! $option_w ]] &&  [[ $# -gt 0 ]] ; then
  >&2 echo -e "Usage: $0 [-a <author name>] [-w <weekstart-weekend>] [-d <days-ago>]\nExample: $0 -a \"John Doe\" -w \"MON-FRI\""
  exit 1
fi


# Use colors, but only if connected to a terminal, and that terminal
# supports them.
if which tput >/dev/null 2>&1; then
  ncolors=$(tput colors)
fi
if [[ -t 1 ]] && [[ -n "$ncolors" ]] && [[ "$ncolors" -ge 8 ]] ; then
  RED=$(tput setaf 1)
  GREEN=$(tput setaf 2)
  YELLOW=$(tput setaf 3)
  BLUE=$(tput setaf 4)
  BOLD=$(tput bold)
  UNDERLINE=$(tput smul)
  NORMAL=$(tput sgr0)
else
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  BOLD=""
  UNDERLINE=""
  NORMAL=""
fi


# Only enable exit-on-error after the non-critical colorization stuff,
# which may fail on systems lacking tput or terminfo
set -e


## Set the necessary variables for standup
AUTHOR=`git config user.name`
SINCE="yesterday"


if [[ $option_a ]] ; then
  AUTHOR="$option_a"
fi


## If -d flag is there, use it's value for the since
if [[ $option_d ]] && [[ $option_d -ne 0 ]] ; then
  SINCE="$option_d days ago"
else
  ## -d flag is not there, go on with the normal processing
  WEEKSTART="$( cut -d '-' -f 1 <<< "$option_w" )";
  WEEKSTART=${WEEKSTART:="Mon"}

  WEEKEND="$( cut -d '-' -f 2 <<< "$option_w" )";
  WEEKEND=${WEEKEND:="Fri"}

  ## In case it is the start of week, we need to
  ## show the commits since the last weekend
  shopt -s nocasematch
  if [[ $WEEKSTART == "$(date +%a)" ]] ; then
    SINCE="last $WEEKEND";
  fi
fi


GIT_LOG_COMMAND="git --no-pager log \
    --all
    --no-merges
    --since=\"$SINCE\"
    --author=\"$AUTHOR\"
    --abbrev-commit
    --oneline
    --pretty=format:'%Cred%h%Creset - %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'"


## For when the command has been run in a non-repo directory
if [[ ! -d ".git" ]]; then

    ## Iterate through all the top level directories inside
    ## and look for any git repositories.
    for DIR in */ ; do

        cd "$DIR"

        ## Show the detail only if it is a git repository
        if [[ -d ".git" ]] ; then
            {
              GITOUT=$(eval ${GIT_LOG_COMMAND} 2>/dev/null )
            } || {
              GITOUT=""
            }

            ## Only output if there is some activity
            if [[ ! -z "$GITOUT" ]] ;  then
                echo "${BOLD}${UNDERLINE}${YELLOW}$DIR${NORMAL}"
                echo "$GITOUT"
            fi
        fi

        cd ..
    done

else
    {
      GITOUT=$(eval ${GIT_LOG_COMMAND} 2>/dev/null )
    } || {
      GITOUT=""
    }

    if [[ ! -z "$GITOUT" ]] ;  then
      echo "$GITOUT"
    else
      echo "${YELLOW}Seems like $AUTHOR did nothing!"
    fi
fi
